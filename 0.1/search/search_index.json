{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Open Vault: Deploy Deployment documentation for the Open Vault project Links Site: http://ovfrontend.k8s.wgbhdigital.org/ Documentation: https://wgbh-mla.github.io/ov-deploy/ Github: https://github.com/WGBH-MLA/ov-deploy","title":"Open Vault: Deploy"},{"location":"#open-vault-deploy","text":"Deployment documentation for the Open Vault project","title":"Open Vault: Deploy"},{"location":"#links","text":"Site: http://ovfrontend.k8s.wgbhdigital.org/ Documentation: https://wgbh-mla.github.io/ov-deploy/ Github: https://github.com/WGBH-MLA/ov-deploy","title":"Links"},{"location":"cli/","text":"CLI Command line scripts for deployment ./ov Open Vault init script Requirements docker docker compose Usage ./ov COMMAND [args] COMMANDS: b | build build the docker images backup | dump create a backup of the database c | cmd run a compose command d | dev start a development server i | init run initialization script h | help prints this help text m | manage run a wagtail manage.py command restore | load restore a database backup s | shell run a django shell command with the app context Initial setup After cloning this repository: Create the database .db secrets file POSTGRES_PASSWORD = \"YOUR POSTGRESS PASSWORD HERE\" If you need to generate a password: openssl rand -base64 16 Create the backend .env secrets file OV_DB_ENGINE = django.db.backends.postgresql OV_DB_PORT = 5432 OV_DB_NAME = postgres OV_DB_USER = postgres OV_DB_PASSWORD = \"YOUR POSTGRESS PASSWORD HERE\" Run initialization script ./ov init This is the equivelent of running: # initialize submodule git submodule init # checkout current version git submodule update # build docker files ./ov build # Insatll npm requirements ./ov c run -it front npm install Development Environment Run the development environment: ./ov dev","title":"CLI"},{"location":"cli/#cli","text":"Command line scripts for deployment","title":"CLI"},{"location":"cli/#ov","text":"Open Vault init script","title":"./ov"},{"location":"cli/#requirements","text":"docker docker compose","title":"Requirements"},{"location":"cli/#usage","text":"","title":"Usage"},{"location":"cli/#ov-command-args","text":"COMMANDS: b | build build the docker images backup | dump create a backup of the database c | cmd run a compose command d | dev start a development server i | init run initialization script h | help prints this help text m | manage run a wagtail manage.py command restore | load restore a database backup s | shell run a django shell command with the app context","title":"./ov COMMAND [args]"},{"location":"cli/#initial-setup","text":"After cloning this repository: Create the database .db secrets file POSTGRES_PASSWORD = \"YOUR POSTGRESS PASSWORD HERE\" If you need to generate a password: openssl rand -base64 16 Create the backend .env secrets file OV_DB_ENGINE = django.db.backends.postgresql OV_DB_PORT = 5432 OV_DB_NAME = postgres OV_DB_USER = postgres OV_DB_PASSWORD = \"YOUR POSTGRESS PASSWORD HERE\" Run initialization script ./ov init This is the equivelent of running: # initialize submodule git submodule init # checkout current version git submodule update # build docker files ./ov build # Insatll npm requirements ./ov c run -it front npm install","title":"Initial setup"},{"location":"cli/#development-environment","text":"Run the development environment: ./ov dev","title":"Development Environment"},{"location":"deploy/","text":"Deployment steps init To deploy a new stack: 1. Create namespace in Rancher Production: openvault demo: ov-demo 2. Create pods db image: postgres:14.2-alpine secrets: POSTGRES_PASSWORD ov (backend) image: wgbhmla/ov_wag config: ov_wag.config secrets: OV_DB_PASSWORD ov-frontend image: wgbhmla/ov-frontend config: ov-frontend.config ov-nginx image: foggbh/ov-nginx configured with nginx.conf proxy pass to http://ov-frontend:3000 ports: 80/http ingress: hostname: [url] jumpbox (optional utility kit) image: ? Redeploy Redeployment steps for demo or production 0. Check out code Set up the code to represent the state of the application you wish to redeploy. Scenario #1: Redeploy an ov_deploy commit These steps assume some ov_deploy commit should be pushed to some deployment environment, either production or demo . Starting from a known ov_deploy commit or branch: git checkout [commit or branch] git submodule update Scenario #2: Custom code In ov_wag and ov-frontend , checkout (or manually edit) the code in each repository. 1. Build images Build all images: ./ov build Build single image: ./ov build [image name] Note: Other custom commands can be passed into the 2. Push to docker hub (tag the image?) docker push [tag name] 3. Redeploy pods Redeploy the pod(s) Rancher kubectl","title":"Deployment steps"},{"location":"deploy/#deployment-steps","text":"","title":"Deployment steps"},{"location":"deploy/#init","text":"To deploy a new stack:","title":"init"},{"location":"deploy/#1-create-namespace-in-rancher","text":"Production: openvault demo: ov-demo","title":"1. Create namespace in Rancher"},{"location":"deploy/#2-create-pods","text":"","title":"2. Create pods"},{"location":"deploy/#db","text":"image: postgres:14.2-alpine secrets: POSTGRES_PASSWORD","title":"db"},{"location":"deploy/#ov-backend","text":"image: wgbhmla/ov_wag config: ov_wag.config secrets: OV_DB_PASSWORD","title":"ov (backend)"},{"location":"deploy/#ov-frontend","text":"image: wgbhmla/ov-frontend config: ov-frontend.config","title":"ov-frontend"},{"location":"deploy/#ov-nginx","text":"image: foggbh/ov-nginx configured with nginx.conf proxy pass to http://ov-frontend:3000 ports: 80/http ingress: hostname: [url]","title":"ov-nginx"},{"location":"deploy/#jumpbox-optional-utility-kit","text":"image: ?","title":"jumpbox (optional utility kit)"},{"location":"deploy/#redeploy","text":"Redeployment steps for demo or production","title":"Redeploy"},{"location":"deploy/#0-check-out-code","text":"Set up the code to represent the state of the application you wish to redeploy.","title":"0. Check out code"},{"location":"deploy/#scenario-1-redeploy-an-ov_deploy-commit","text":"These steps assume some ov_deploy commit should be pushed to some deployment environment, either production or demo . Starting from a known ov_deploy commit or branch: git checkout [commit or branch] git submodule update","title":"Scenario #1: Redeploy an ov_deploy commit"},{"location":"deploy/#scenario-2-custom-code","text":"In ov_wag and ov-frontend , checkout (or manually edit) the code in each repository.","title":"Scenario #2: Custom code"},{"location":"deploy/#1-build-images","text":"Build all images: ./ov build Build single image: ./ov build [image name] Note: Other custom commands can be passed into the","title":"1. Build images"},{"location":"deploy/#2-push-to-docker-hub","text":"(tag the image?) docker push [tag name]","title":"2. Push to docker hub"},{"location":"deploy/#3-redeploy-pods","text":"Redeploy the pod(s) Rancher kubectl","title":"3. Redeploy pods"},{"location":"manual/","text":"On your local machine, you will need: Docker tools docker docker-compose kubectl Access to the GBH VPN Authorization to push docker images to wgbhmla Dockerhub account. TODO: Add doc on how to verify that you have all these dependencies, and if not, how to get them. Deployment \"Production\" and \"Demo\" deployments are in Kubernetes on AWS. The workloads consist of \"pods\", which are Docker containers, and those containers are run using Docker images that we've pushed to Dockerhub. These docker images come from the Dockerfiles of the ov-frontend and ov_wag repositories. Generally speaking, the deployment process consists of the following tasks: * Checkout the desired versions of ov-frontend and ov_wag source code. * Build Docker images from the Dockerfiles within the specific versions of ov-frontend and ov_wag . * Push the Docker images to Dockerhub. * Update the workloads in Kubernetes to use the updated Docker images. Setting up Kubernetes in Rancher If we are deploying for the first time, we need to configure Kubernetes to be able to receive deployments. If this has already been done, you can skip this section. TODO: enumerate the minimum steps required to get Kubernetes setup up in Rancher to handle deployments. Log into VPN. Go to https://rancherext.wgbh.org/login, and click \"Login with Azure ID\". Go to MLA project (TODO: elaborate) Create namespacde (TODO: elaborate) Click \"Deploy Workload\" Enter \"ov\" for Name field Docker image: \"[DOCKERHUB ACCOUNT NAME]/ov:latest\" Enter environment variables. TODO: elaborate on how. Enter secrets. TODO: elaborate on how. Manual Deployment In the event that an automated deployment fails you can do a step-by-step deployment to help debug problems. Get the latest code from this repository. # skip this line if you've already cloned the repository git clone git@github.com:WGBH-MLA/ov_deploy.git cd ov_deploy git checkout main git pull The versions of ov_wag and ov-frontend repositories will be used in several of the following commands, so to avoid typos, you can export the versions to environment variables, and use those environment variables in subsequent commands. export $OV_WAG_VERSION=[tag|branch|commit] export $OV_FRONTEND_VERSION=[tag|branch|commit] Set the ov_wag submodule to the tag, branch, or commit that you want to deploy. cd ov_wag git checkout $OV_WAG_VERSION cd .. Set the ov-frontend submodule to the tag, branch, or commit that you want to deploy. cd ov-frontend git checkout $OV_FRONTEND_VERSION cd .. Build Docker images. TODO: change build from 'production' to 'deployment'? This would require a change to Dockerfile in ov_wag repo, but would be less confusing since the image may end up in either Production or Demo environments. TODO: Build ov-nginx image. docker build -t wgbhmla/ov_wag:$OV_WAG_VERSION --target production ./ov_wag docker build -t wgbhmla/ov-frontend:$OV_FRONTEND_VERSION --target production ./ov-frontend Push newly built images to Docker Hub # The password for Docker Hub user wgbhmla is in Passwordstate. docker login --username wgbhmla docker push wgbhmla/ov_wag:$OV_WAG_VERSION docker push wgbhmla/ov_wag:$OV_WAG_VERSION Update Kubernetes workloads Using the Rancher web interface TODO: needs more affirming feedback. Log in to GBH VPN using Cicso AnyConnect. Go to https://rancherext.wgbh.org/login and click \"Log In with Azure ID\". From the leftmost item in the top menu, select the \"MLA\" project, which is indicated as being in the cluster named \"digital-eks-dev\". Beneath the top menu are several tabs: \"Workloads\", \"Load Balancing\", \"Service Discovery\", and \"Volumes\". Select \"Workloads\" if it is not already selected. Locate the row identifying the \"ov\" workload under the table heading that says \"Namespace: openvault\". Go to https://rancherext.wgbh.org In the top menu, click on the \"digital-eks-dev\", then click the \"MLA\" project name. 1. From the command line using kubectl TBD Locate the workoad Click the \"Re-deploy\" TODO: add where to check logs, get feedback on success/fail TODO: add details about \"image pull policy\" and make sure it's set correctly -- i think to 'always pull' or something TARGET WORKFLOW! git clone git@github.com:WGBH-MLA/ov_deploy.git cd ov_deploy git ch -b test-new-versions-of-front-and-back-ends ./ov deploy \\ # required parameters \\ --namespace=openvault-demo \\ --ov_wag-version=v1.1.0 \\ --ov-frontend-version=v2.2.0 \\ # optional params, values shown are defaults --ov_wag-env=./ov_wag/env.yml \\ --ov_wag-secrets=./ov_wag/secrets.yml \\ --ov-frontend-env=./ov-frontend/env.yml \\ # qa testing ensues # it works hooray! # Now, do we branch/pr/merge # manual deploy for now until continuous-deploy? # Do we first deploy to prod to ensure it's working so that we can # do a quick rollback without involving continuous deployment in case of # error? # Or, do we not check in anything? Deploy to prod, check it out, and we're # done.","title":"Manual"},{"location":"manual/#on-your-local-machine-you-will-need","text":"Docker tools docker docker-compose kubectl Access to the GBH VPN Authorization to push docker images to wgbhmla Dockerhub account. TODO: Add doc on how to verify that you have all these dependencies, and if not, how to get them.","title":"On your local machine, you will need:"},{"location":"manual/#deployment","text":"\"Production\" and \"Demo\" deployments are in Kubernetes on AWS. The workloads consist of \"pods\", which are Docker containers, and those containers are run using Docker images that we've pushed to Dockerhub. These docker images come from the Dockerfiles of the ov-frontend and ov_wag repositories. Generally speaking, the deployment process consists of the following tasks: * Checkout the desired versions of ov-frontend and ov_wag source code. * Build Docker images from the Dockerfiles within the specific versions of ov-frontend and ov_wag . * Push the Docker images to Dockerhub. * Update the workloads in Kubernetes to use the updated Docker images.","title":"Deployment"},{"location":"manual/#setting-up-kubernetes-in-rancher","text":"If we are deploying for the first time, we need to configure Kubernetes to be able to receive deployments. If this has already been done, you can skip this section. TODO: enumerate the minimum steps required to get Kubernetes setup up in Rancher to handle deployments. Log into VPN. Go to https://rancherext.wgbh.org/login, and click \"Login with Azure ID\". Go to MLA project (TODO: elaborate) Create namespacde (TODO: elaborate) Click \"Deploy Workload\" Enter \"ov\" for Name field Docker image: \"[DOCKERHUB ACCOUNT NAME]/ov:latest\" Enter environment variables. TODO: elaborate on how. Enter secrets. TODO: elaborate on how.","title":"Setting up Kubernetes in Rancher"},{"location":"manual/#manual-deployment","text":"In the event that an automated deployment fails you can do a step-by-step deployment to help debug problems. Get the latest code from this repository. # skip this line if you've already cloned the repository git clone git@github.com:WGBH-MLA/ov_deploy.git cd ov_deploy git checkout main git pull The versions of ov_wag and ov-frontend repositories will be used in several of the following commands, so to avoid typos, you can export the versions to environment variables, and use those environment variables in subsequent commands. export $OV_WAG_VERSION=[tag|branch|commit] export $OV_FRONTEND_VERSION=[tag|branch|commit] Set the ov_wag submodule to the tag, branch, or commit that you want to deploy. cd ov_wag git checkout $OV_WAG_VERSION cd .. Set the ov-frontend submodule to the tag, branch, or commit that you want to deploy. cd ov-frontend git checkout $OV_FRONTEND_VERSION cd .. Build Docker images. TODO: change build from 'production' to 'deployment'? This would require a change to Dockerfile in ov_wag repo, but would be less confusing since the image may end up in either Production or Demo environments. TODO: Build ov-nginx image. docker build -t wgbhmla/ov_wag:$OV_WAG_VERSION --target production ./ov_wag docker build -t wgbhmla/ov-frontend:$OV_FRONTEND_VERSION --target production ./ov-frontend Push newly built images to Docker Hub # The password for Docker Hub user wgbhmla is in Passwordstate. docker login --username wgbhmla docker push wgbhmla/ov_wag:$OV_WAG_VERSION docker push wgbhmla/ov_wag:$OV_WAG_VERSION Update Kubernetes workloads Using the Rancher web interface TODO: needs more affirming feedback. Log in to GBH VPN using Cicso AnyConnect. Go to https://rancherext.wgbh.org/login and click \"Log In with Azure ID\". From the leftmost item in the top menu, select the \"MLA\" project, which is indicated as being in the cluster named \"digital-eks-dev\". Beneath the top menu are several tabs: \"Workloads\", \"Load Balancing\", \"Service Discovery\", and \"Volumes\". Select \"Workloads\" if it is not already selected. Locate the row identifying the \"ov\" workload under the table heading that says \"Namespace: openvault\". Go to https://rancherext.wgbh.org In the top menu, click on the \"digital-eks-dev\", then click the \"MLA\" project name. 1. From the command line using kubectl TBD Locate the workoad Click the \"Re-deploy\" TODO: add where to check logs, get feedback on success/fail TODO: add details about \"image pull policy\" and make sure it's set correctly -- i think to 'always pull' or something","title":"Manual Deployment"},{"location":"manual/#target-workflow","text":"git clone git@github.com:WGBH-MLA/ov_deploy.git cd ov_deploy git ch -b test-new-versions-of-front-and-back-ends ./ov deploy \\ # required parameters \\ --namespace=openvault-demo \\ --ov_wag-version=v1.1.0 \\ --ov-frontend-version=v2.2.0 \\ # optional params, values shown are defaults --ov_wag-env=./ov_wag/env.yml \\ --ov_wag-secrets=./ov_wag/secrets.yml \\ --ov-frontend-env=./ov-frontend/env.yml \\ # qa testing ensues # it works hooray! # Now, do we branch/pr/merge # manual deploy for now until continuous-deploy? # Do we first deploy to prod to ensure it's working so that we can # do a quick rollback without involving continuous deployment in case of # error? # Or, do we not check in anything? Deploy to prod, check it out, and we're # done.","title":"TARGET WORKFLOW!"}]}