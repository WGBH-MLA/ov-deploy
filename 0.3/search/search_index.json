{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Open Vault: Deploy","text":""},{"location":"#about","title":"About","text":"<p>Deployment documentation for the Open Vault project</p>"},{"location":"#links","title":"Links","text":"<ul> <li>Site: https://ov.wgbh-mla.org/</li> <li>Admin: https://admin.ov.wgbh-mla.org/admin/</li> <li>Documentation: wgbh-mla.github.io/ov-deploy</li> <li>Github: github.com/WGBH-MLA/ov-deploy</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>Developed by the Media Library and Archives at WGBH Boston</p>"},{"location":"db/","title":"Database","text":"<p>Data is stored in a PostGreSQL database, with a single worker node running in kubernetes. This page describes the backup and restore process of data management.</p> <p>See setup/#db for more details about creating and configuring the database.</p>"},{"location":"db/#db","title":"<code>./db</code>","text":"<p>Some basic database maintenance commands can be performed with the <code>./db</code> tool.</p>"},{"location":"db/#options","title":"Options","text":""},{"location":"db/#context","title":"Context","text":"Required - The kubernetes namespace to execute the command. <p>Must be one of:</p> <ul> <li><code>openvault</code></li> <li><code>openvault-demo</code></li> </ul> <p>Setting up kubectl context</p> <p>The following commands assume a properly configured kubectl context. See production setup for details.</p>"},{"location":"db/#commands","title":"Commands","text":""},{"location":"db/#backup","title":"backup","text":"<p>Backup the database and save to a local file named <code>db_{TIMESTAMP}.sql</code></p>"},{"location":"db/#restore","title":"restore","text":"<p>Restore the database from a file.</p> <p>Example:</p> Restore the demo instance from a local backup copy<pre><code>./db -c openvault-demo restore db_2022-10-26T11.11.11.sql\n</code></pre>"},{"location":"deploy/","title":"Deployment","text":""},{"location":"deploy/#general","title":"General","text":"<p>Deployments are run in Kubernetes on AWS. The workloads consist of <code>pods</code> (Docker containers) which runs images automatically built from GitHub Actions</p> <p>These images are built from the <code>Dockerfile</code>s of the <code>ov-frontend</code> and <code>ov-wag</code> repositories.</p> <p>Setup</p> <p>If you haven't set up a production environment, follow the steps in Setup first.</p>"},{"location":"deploy/#deployment-process","title":"Deployment Process","text":"<p>Generally speaking, the deployment process consists of the following tasks:</p> <ul> <li>Checkout the desired versions of the image(s) to be built.</li> <li>Build Docker images from the <code>Dockerfile</code>s for each microservice.</li> <li>Push the Docker images to Dockerhub.</li> <li>Update the workloads in Kubernetes to use the updated Docker images.</li> </ul> <p>The ./deploy script is the simplest way to create and deploy an image, and should work in most cases.</p>"},{"location":"deploy/#scenario-1-redeploy-an-ov_deploy-commit","title":"Scenario #1: Redeploy an <code>ov_deploy</code> commit","text":"<p>These steps assume some <code>ov_deploy</code> commit should be pushed to some deployment environment, either <code>production</code> or <code>demo</code>.</p> <p>Starting from a known <code>ov_deploy</code> commit or branch:</p> <p><code>git checkout [commit or branch]</code></p> <p><code>git submodule update</code></p>"},{"location":"deploy/#scenario-2-custom-code","title":"Scenario #2: Custom code","text":"<p>In <code>ov-wag</code> and <code>ov-frontend</code>, checkout (or manually edit) the code in each repository.</p>"},{"location":"deploy/#1-build-images","title":"1. Build images","text":"<ul> <li>Build all images:</li> </ul> <p><code>./ov build</code></p> <ul> <li>Build single image:</li> </ul> <p><code>./ov build [image name]</code></p> <p>Note: Other custom commands can be passed into the</p>"},{"location":"deploy/#2-push-to-docker-hub","title":"2. Push to docker hub","text":"<p>(tag the image?)</p> <p><code>docker push [tag name]</code></p>"},{"location":"deploy/#3-redeploy-pods","title":"3. Redeploy pods","text":"<p>Redeploy the pod(s)</p> <ul> <li>Rancher</li> <li>kubectl</li> </ul>"},{"location":"deploy/#deploy","title":"<code>./deploy</code>","text":"<p>The <code>./deploy</code> helper script is designed to automate the process of deploying known versions of parts or the whole stack. For any given pod, it will:</p> <ul> <li>Build the docker images</li> <li>Push the images to docker hub</li> <li>Set the version tag of each deployed image</li> </ul>"},{"location":"deploy/#usage","title":"Usage","text":"<p>The script can be called with several arguments:</p> <ol> <li> Required options: <p><code>-c context</code></p> <p>TODO: kubectl context</p> <p>To setup the kubectl context, see the production setup documentation</p> </li> <li> Optional deployments: <p>Backend: <code>-b VERSION</code></p> <p>Frontend: <code>-f VERSION</code></p> <p>Proxy: <code>-p VERSION</code></p> <p>Jumpbox: <code>-j VERSION</code></p> <p>db: <code>-d VERSION</code></p> <p>Where each <code>VERSION</code> is one of:</p> <ul> <li>a git tag</li> <li>a git branch</li> <li>a git commit</li> </ul> </li> <li> Run command <p>Verify in console logs that job has completed successfully, or returned an error.</p> </li> </ol>"},{"location":"deploy/#example","title":"Example","text":"Deploy v0.1.0 of backend and frontend<pre><code>./deploy -c openvault -b v0.1.0 -f v0.1.0\n</code></pre>"},{"location":"dev/","title":"Development","text":"<p>This page describes how to run the development environment on a machine with <code>docker compose</code>.</p> Requirements <ul> <li>docker</li> <li>docker compose</li> </ul> <p>Running the services outside of docker is possible, but not supported in this context.</p>"},{"location":"dev/#ov","title":"./ov","text":"<p>The <code>ov</code> file is the primary Open Vault command line script. This contains a number of pre-built commands to do basic operations</p>"},{"location":"dev/#usage","title":"Usage","text":"<p><code>./ov COMMAND [args]</code></p> ./ov --help<pre><code>COMMANDS:\n\n  b | build        build the docker images\n  backup | dump    create a backup of the database\n  c | cmd          run a compose command\n  d | dev          start a development server\n  deploy           run a ./deploy command\n  i | init         run initialization script\n  h | help         prints this help text\n  m | manage       run a wagtail manage.py command\n  restore | load   restore a database backup\n  s | shell        run a django shell command with the app context\n</code></pre>"},{"location":"dev/#commands","title":"Commands","text":""},{"location":"dev/#b-build","title":"<code>b</code> | <code>build</code>","text":"Build the docker images locally. <p>build a single image</p> <p>Additional docker arguments can be passed to this command.</p> <p>For example, to build only a single image:</p> Build frontend<pre><code>./ov b front\n</code></pre>"},{"location":"dev/#backup-dump","title":"<code>backup</code> | <code>dump</code>","text":"Create a database dump file with the timestamp as the filename."},{"location":"dev/#c-cmd","title":"<code>c</code> | <code>cmd</code>","text":"Run a <code>docker compose</code> command with the base config files in place."},{"location":"dev/#d-dev","title":"<code>d</code> | <code>dev</code>","text":"Run Development Environment Run the development environment, with <code>docker compose</code>, and follow container logs. <p>Compose arguments</p> <p>Additional compose arguments can be passed. For example, to rebuild the containers before running:</p> <pre><code>./ov d --build\n</code></pre>"},{"location":"dev/#deploy","title":"<code>deploy</code>","text":"Shortcut for <code>./deploy [command]</code>. See Deploy for detailed usage."},{"location":"dev/#docs","title":"<code>docs</code>","text":"Build and run the documentation server, with live change reloading."},{"location":"dev/#i-init","title":"<code>i</code> | <code>init</code>","text":"Initialize a development environment. See Setup for detailed instructions."},{"location":"dev/#m-manage","title":"<code>m</code> | <code>manage</code>","text":"Run a <code>manage.py</code> command in the docker context."},{"location":"dev/#restore","title":"<code>restore</code>","text":"Restore the database with a backup. restore db<pre><code>./ov restore db_backup.sql\n</code></pre>"},{"location":"dev/#s-shell","title":"<code>s</code> | <code>shell</code>","text":"Enter into a python django shell interpreter, with the application context loaded."},{"location":"dev/#examples","title":"Examples","text":"<p>The following are some useful examples of development commands that might be run:</p>"},{"location":"dev/#migrate-database","title":"Migrate database","text":"<p>Generating the migration files can be accomplished with:</p> <pre><code>./ov m makemigrations\n</code></pre> <p>To Run the database migrations:</p> <pre><code>./ov m migrate\n</code></pre>"},{"location":"dev/#show-the-logs","title":"Show the logs","text":"<p>Show the docker compose logs <code>./ov c logs</code></p> <p>Show logs for just the frontend <code>./ov c logs ov-frontend</code></p>"},{"location":"manual/","title":"Manual deployment","text":"<p>In the event that an automated deployment fails you can do a step-by-step deployment to help debug problems.</p>"},{"location":"manual/#requirements","title":"Requirements","text":"<p>On your local machine, you will need:</p> <ul> <li>docker</li> <li>kubectl</li> </ul> <p>Authorization</p> <p>In addition to the software requirements, in order to manage the deployment stack, you will need:</p> <ul> <li>Authorization to push docker images to <code>wgbhmla</code> Dockerhub account.</li> <li>Access to the GBH VPN</li> </ul> <p>TODO: Verify dependencies</p> <p>Add doc on how to verify that you have all these dependencies, and if not, how to get them._</p> <p>OV_*_VERSION</p> <p>The versions of <code>ov-wag</code> and <code>ov-frontend</code> repositories will be used in several of the following commands, so the following commands are documented with the <code>$OV_WAG_VERSION</code> and <code>$OV_FRONTEND_VERSION</code> variables. You can set these in your session by using <code>export</code></p> Export OV_*_VERSION<pre><code>export OV_WAG_VERSION=[tag|branch|commit]\nexport OV_FRONTEND_VERSION=[tag|branch|commit]\n</code></pre> <p>After setting up the repository:</p>"},{"location":"manual/#steps","title":"Steps","text":""},{"location":"manual/#build-images","title":"Build images","text":"<ol> <li> <p>Set the <code>ov-wag</code> submodule to the tag, branch, or commit that you want to deploy.</p> Checkout backend<pre><code>cd ov-wag\ngit checkout $OV_WAG_VERSION\ncd ..\n</code></pre> </li> <li> <p>Set the <code>ov-frontend</code> submodule to the tag, branch, or commit that you want to deploy.</p> Checkout frontend<pre><code>cd ov-frontend\ngit checkout $OV_FRONTEND_VERSION\ncd ..\n</code></pre> </li> <li> <p>Build Docker images.</p> Build docker images<pre><code>docker build -t wgbhmla/ov-wag:$OV_WAG_VERSION --target production ./ov-wag\ndocker build -t wgbhmla/ov-frontend:$OV_FRONTEND_VERSION --target production ./ov-frontend\n</code></pre> </li> </ol> <p>TODO: change build from <code>production</code> to <code>deployment</code>?</p> <p>This would require a change to Dockerfile in ov-wag repo, but would be less confusing since the image may end up in either Production or Demo environments.</p>"},{"location":"manual/#push-images","title":"Push images","text":"<ol> <li> <p>Login to docker hub</p> docker login<pre><code>docker login --username wgbhmla\n</code></pre> </li> <li> <p>Push newly built images to Docker Hub</p> push images<pre><code>docker push wgbhmla/ov-wag:$OV_WAG_VERSION\ndocker push wgbhmla/ov-frontend:$OV_FRONTEND_VERSION\n</code></pre> </li> </ol> <p>Passwords</p> <p>The password for Docker Hub user <code>wgbhmla</code> is in passwordstate.</p>"},{"location":"manual/#update-kubernetes-workloads","title":"Update Kubernetes workloads","text":"<p>There several ways of updating the Kubernetes workflow:</p> <ul> <li><code>kubectl</code> commands</li> <li>Rancher web interface</li> </ul> <p><code>./deploy</code></p> <p>The <code>./deploy</code> script is designed to execute the necessary <code>kubectl</code> commands from an authorized device. It</p> <p>See usage details in Deploy</p>"},{"location":"manual/#using-kubectl","title":"Using <code>kubectl</code>","text":"<ol> <li> <p>Set the context</p> Set the kubectl context<pre><code>kubectl config use-context openvault\n</code></pre> </li> <li> <p>Set the app image deployment tag</p> set backend version to v0.2.0<pre><code>kubectl set image deployment.apps/ov-wag ov-wag=wgbhmla/ov-wag:v0.2.0\n</code></pre> </li> </ol>"},{"location":"manual/#using-the-rancher-web-interface","title":"Using the Rancher web interface","text":"<p>TODO: needs more affirming feedback</p> <p>Go through steps to ensure consistency</p> <p>Login</p> <ol> <li>Login to VPN</li> <li>Login to Rancher (\"Log in with Azure ID\")</li> <li>Go to MLA project</li> </ol> <ol> <li> <p>Select the <code>Workloads</code> tab, if it is not already selected.</p> <ul> <li>Other tabs are: <code>Load Balancing</code>, <code>Service Discovery</code>, and <code>Volumes</code>.</li> </ul> </li> <li> <p>Locate \"Namespace: openvault\"</p> </li> <li>Click on the row identifying the <code>ov-wag</code> workload</li> <li>Edit the <code>Docker Image</code> value to the desired <code>image:tag</code> combination</li> <li>Click <code>Save</code></li> </ol> <p>TODO: add where to check logs, get feedback on success/fail</p> <p>TODO: image pull policy</p> <p>add details about \"image pull policy\" and make sure it's set correctly -- i think to 'always pull' or something</p>"},{"location":"manual/#example-workflow","title":"Example workflow","text":"<pre><code>git clone git@github.com:WGBH-MLA/ov_deploy.git\ncd ov_deploy\ngit ch -b test-new-versions-of-front-and-back-ends\n./ov deploy \\\n  # required parameters \\\n  --namespace=openvault-demo \\\n  --ov-wag-version=v1.1.0 \\\n  --ov-frontend-version=v2.2.0 \\\n  # optional params, values shown are defaults\n  --ov-wag-env=./ov-wag/env.yml \\\n  --ov-wag-secrets=./ov-wag/secrets.yml \\\n  --ov-frontend-env=./ov-frontend/env.yml \\\n</code></pre> <p>TODO: clean manual script</p> <p>qa testing ensues</p> <p>it works hooray!</p> <p>Now, do we branch/pr/merge</p> <p>manual deploy for now until continuous-deploy?</p> <p>Do we first deploy to prod to ensure it's working so that we can do a quick rollback without involving continuous deployment in case of error?</p> <p>Or, do we not check in anything? Deploy to prod, check it out, and we're done.</p>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#development","title":"Development","text":"<p>The following steps describe the setup process for local development. For production setup, see Production</p>"},{"location":"setup/#0-checkout-code","title":"0. Checkout code","text":"<p>Clone the source code from github, including submodules:</p> <pre><code>git clone --recurse-submodules https://github.com/WGBH-MLA/ov-deploy.git\n</code></pre> <p>Change into the new <code>ov-deploy</code> directory</p> <pre><code>cd ov-deploy\n</code></pre> Initialize and update submodules <p>If the repository was cloned without the submodules, they will need to be initialized first. <pre><code>git submodule init\ngit submodule update\n</code></pre></p> Checkout code <p>If running a version other than the <code>main</code> branch, you will need to checkout the code first, and update the git submodules.</p> <p>Usually this will be a tag or a branch. For example, if checking out <code>v0.2.0</code>:</p> <pre><code>git checkout v0.2.0\ngit submodule update\n</code></pre>"},{"location":"setup/#1-create-the-database-secrets-file","title":"1. Create the database secrets file","text":"<p>In <code>ov-wag</code>, create a file called <code>.db</code> with the following contents:</p> ov-wag/.db<pre><code>POSTGRES_PASSWORD=\"YOUR POSTGRES PASSWORD HERE\"\n</code></pre> Generating a password <p>This command will generate a new password config file and save it to <code>ov-wag/.db</code></p>"},{"location":"setup/#warning-this-will-overwrite-any-existing-password-stored-in-the-db-file","title":"WARNING: This will overwrite any existing password stored in the <code>.db</code> file!","text":"<p>Run this command from the top level <code>ov-deploy/</code> directory. <pre><code>echo \"POSTGRES_PASSWORD=$(openssl rand -base64 24)\" &gt; ov-wag/.db\n</code></pre></p>"},{"location":"setup/#2-create-the-backend-secrets-file","title":"2. Create the backend secrets file","text":"<p>In <code>ov-wag</code>, create a file called <code>.env</code> with the following contents:</p> ov-wag/.env<pre><code>OV_DB_ENGINE=django.db.backends.postgresql\nOV_DB_PORT=5432\nOV_DB_NAME=postgres\nOV_DB_USER=postgres\nOV_DB_PASSWORD=\"YOUR POSTGRES PASSWORD HERE\"\n\nOV_BASE_URL=http://localhost:3000\nOV_ADMIN_BASE_URL=http://localhost:8000\n</code></pre>"},{"location":"setup/#3-run-initialization-script","title":"3. Run initialization script","text":"<pre><code>./ov init\n</code></pre> <code>./ov init</code> script <p>This is the equivalent of running:</p> <pre><code>./ov build # (1)\n\n./ov c run -it front npm install # (2)\n</code></pre> <ol> <li>build docker files</li> <li>install npm requirements</li> </ol>"},{"location":"setup/#production","title":"Production","text":"<p>If deploying for the first time, Kubernetes must be configured to receive deployments. If this has already been done, you can skip this section.</p> <p>Rancher Login</p> <ol> <li>Login to VPN</li> <li>Login to Rancher (\"Log in with Azure ID\")</li> <li>Go to MLA project</li> </ol> Setting up kubectl context <p>To facilitate easy context switching between production and demo instances, the deployment tools define the kubectl context as follows:</p> ~/.kube/config<pre><code>apiVersion: v1\nclusters:\n- cluster:\n    server: [RANCHER SERVER URL]\nname: digital-eks-dev\ncontexts:\n- context:\n    cluster: digital-eks-dev\n    namespace: openvault\n    user: digital-eks-dev\nname: openvault\ncurrent-context: openvault\nkind: Config\npreferences: {}\nusers:\n- name: digital-eks-dev\nuser:\n    token: [TOKEN]\n</code></pre>"},{"location":"setup/#create-namespace","title":"Create namespace","text":"<p>TODO: elaborate</p>"},{"location":"setup/#create-workloads","title":"Create workloads","text":""},{"location":"setup/#for-each-workload","title":"For each workload:","text":"<ol> <li>From the Workloads tab of the project, Click <code>Deploy</code></li> <li> <p>Enter the name of the service</p> <p>Service name</p> <p>If using the automatic <code>deploy</code> script, the name of the service must exactly match the name of the docker hub image</p> </li> <li> <p>Set the Docker image to: <code>[DOCKERHUB ACCOUNT NAME]/[DOCKER IMAGE NAME]:[TAG]</code></p> <ul> <li>For example: <code>wgbhmla/ov-wag:latest</code></li> </ul> </li> <li> <p>Set environment variables</p> <p>Create a new config map and set the values from the config files below.</p> <p>Under <code>Environment Variables</code> Click <code>Add From Source</code> and set <code>type: Config Map</code></p> <p>Set the name of the config map and save the settings.</p> <p>Restart any running container using that config.</p> </li> <li> <p>Mount volumes</p> <p>If needed, create an external volume under the <code>Volumes</code> tab and mount it to the specified location.</p> </li> <li> <p>Add secrets</p> <p>Add a new secret with any secrets that need to be available.</p> <p>Click <code>Add From Source</code> and set <code>type: Secret</code></p> </li> </ol> <p>TODO: Enumerate kube steps</p> <p>Enumerate the minimum steps required to get Kubernetes setup up in Rancher to handle deployments.</p>"},{"location":"setup/#workloads","title":"Workloads","text":"<p>The following services are needed to run the stack:</p>"},{"location":"setup/#db","title":"db","text":"<ul> <li> <p>image: <code>postgres:14.2-alpine</code></p> </li> <li> <p>volumes:</p> <ul> <li><code>ov-db</code>: <code>/var/lib/postgresql/data</code><ul> <li><code>Read-Only=False</code></li> </ul> </li> </ul> </li> <li> <p>secrets:</p> db secrets<pre><code>POSTGRES_PASSWORD=p@ssW0rd!\n</code></pre> </li> </ul>"},{"location":"setup/#ov-wag-backend","title":"ov-wag (backend)","text":"<ul> <li>image: <code>wgbhmla/ov-wag</code></li> <li> <p>volumes:</p> <ul> <li><code>ov-static</code>: <code>/app/static/</code>: <code>rw</code></li> <li><code>ov-media</code>: <code>/app/media/</code>: <code>rw</code></li> </ul> </li> <li> <p>config:</p> ov-wag-config<pre><code>DJANGO_SETTINGS_MODULE=ov_wag.settings.production\n\nOV_DB_ENGINE=django.db.backends.postgresql\nOV_DB_HOST=db\nOV_DB_PORT=5432\nOV_DB_NAME=postgres\nOV_DB_USER=postgres\n\nOV_BASE_URL=http://ovfrontend.k8s.wgbhdigital.org\nOV_ADMIN_BASE_URL=http://ov-admin.k8s.wgbhdigital.org\nOV_TRUSTED_ORIGINS=http://ov-admin.k8s.wgbhdigital.org\nOV_ALLOWED_HOSTS=ov-wag\n</code></pre> </li> <li> <p>secrets:</p> ov-wag-secrets<pre><code>OV_DB_PASSWORD=p@ssW0rd!\n</code></pre> </li> </ul>"},{"location":"setup/#ov-frontend","title":"ov-frontend","text":"<ul> <li>image: <code>wgbhmla/ov-frontend</code></li> <li> <p>config:</p> ov-frontend environment<pre><code>OV_API_URL=ov-wag\n</code></pre> </li> </ul>"},{"location":"setup/#ov-nginx","title":"ov-nginx","text":"<ul> <li> <p>image: <code>wgbhmla/ov-nginx</code></p> <ul> <li>preconfigured with <code>nginx.conf</code></li> </ul> </li> <li> <p>Admin site: ov-admin.k8s.wgbhdigital.org</p> <ul> <li>proxy pass to <code>http://ov-wag</code></li> </ul> </li> <li> <p><code>/static</code> served from <code>/static/</code> mounted volume</p> </li> <li> <p><code>/media</code> served from <code>/media/</code> mounted volume</p> </li> <li> <p>Frontend: ovfrontend.k8s.wgbhdigital.org</p> <ul> <li>proxy pass to <code>http://ov-frontend:3000</code></li> </ul> </li> </ul> <p>external <code>/media</code> host</p> <p>We will  need to change this configuration when we switch to using an s3 bucket, or other external media host.</p> <ul> <li> <p>volumes:</p> <ul> <li><code>ov-static</code>: <code>/static/</code>: <code>r</code></li> <li><code>ov-media</code>: <code>/media/</code>: <code>r</code></li> </ul> </li> <li> <p>endpoints:</p> <ul> <li><code>443/http</code></li> <li>Secured with SSL cert from IT certbot</li> </ul> </li> <li> <p>Load Balancing:</p> <ul> <li> <p><code>ov-admin</code></p> <ul> <li>Hostname: <code>http://ov-admin.k8s.wgbhdigital.org</code></li> <li>Path: <code>/</code></li> <li>Target: <code>ov-nginx</code></li> <li>Port: 80</li> </ul> </li> <li> <p><code>ov-front</code></p> <ul> <li>Hostname: <code>http://ovfrontend.k8s.wgbhdigital.org</code></li> <li>Path: <code>/</code></li> <li>Target: <code>ov-nginx</code></li> <li>Port: 80</li> </ul> </li> </ul> </li> </ul>"},{"location":"setup/#jumpbox","title":"jumpbox","text":"<ul> <li>image: <code>wgbhmla/jumpbox</code></li> </ul>"},{"location":"stack/","title":"About the Stack","text":"<p>Open Vault is deployed as a number of separate services, built into <code>docker</code> images.</p> <p>Development is done with <code>docker compose</code></p> <p>Deployment is orchestrated through <code>kubernetes</code>, using <code>Rancher</code>.</p> Microservices vs macro application <p>While it is possible to run all services combined on a single physical or virtual instance, it is strongly recommended to run as a series of micro-services, which can be versioned and scaled independently.</p> <p>All documentation here will describe deployment through <code>docker</code> and <code>kubernetes</code>.</p>"},{"location":"stack/#concepts","title":"Concepts","text":"<p>The following are some definitions for some of the terms used below:</p>"},{"location":"stack/#production","title":"Production","text":"The fully deployed stack, publicly available to all clients"},{"location":"stack/#demo-staging","title":"Demo / Staging","text":"A separate production stack, used to test changes and maintain a live working backup. This will be available on a different domain than the production stack"},{"location":"stack/#image","title":"Image","text":"A docker container containing all the code needed to run a single service."},{"location":"stack/#pod","title":"Pod","text":"A single instance of a running docker image."},{"location":"stack/#namespace","title":"Namespace","text":"The name of the Kubernetes context. <p>Valid namespaces</p> <p>Currently, this must be one of:</p> <ul> <li><code>openvault</code></li> <li><code>ov-demo</code></li> </ul>"},{"location":"stack/#services","title":"Services","text":"<p>These are the pre-built docker images to deploy various microservices:</p>"},{"location":"stack/#ov-frontend","title":"<code>ov-frontend</code>","text":"<p>Javascript frontend, built with remix</p> <p>Source: github.com/WGBH-MLA/ov-frontend/</p> <p>Docker: wgbhmla/ov-frontend</p>"},{"location":"stack/#ov-wag","title":"<code>ov-wag</code>","text":"<p>Python backend and API, built with wagtail</p> <p>Source: github.com/WGBH-MLA/ov-wag</p> <p>Docker: wgbhmla/ov-wag</p>"},{"location":"stack/#db","title":"<code>db</code>","text":"<p>Database. Built with PostgreSQL</p> <pre><code>image: postgres:14.2-alpine\n</code></pre>"},{"location":"stack/#ov-nginx","title":"<code>ov-nginx</code>","text":"<p>Proxy image, using nginx</p> <pre><code>image: ov-nginx:v0.1.0\n</code></pre>"},{"location":"stack/#jumpbox","title":"<code>jumpbox</code>","text":"<p>Optional utility kit, based on ubuntu with command line helpers such as:</p> <ul> <li><code>curl</code></li> <li><code>postgres</code></li> <li><code>python</code></li> </ul>"},{"location":"stack/#call-sequence","title":"Call sequence","text":"<p>The following diagram describes the call sequence for incoming requests:</p> <pre><code>sequenceDiagram\nClient -&gt;&gt; Proxy: requests page\nProxy --&gt;&gt; Frontend: nginx proxies request\nFrontend -&gt;&gt; Backend: fetches latest data from API\nBackend -&gt;&gt; DB: polls the database\nDB -&gt;&gt; Backend: return database results\nBackend -&gt;&gt; Frontend: return API results\nFrontend --&gt;&gt; Proxy: build page with latest results\nProxy -&gt;&gt; Client: return page</code></pre>"}]}