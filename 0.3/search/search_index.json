{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Open Vault: Deploy","text":""},{"location":"#about","title":"About","text":"<p>Deployment documentation for the Open Vault project</p>"},{"location":"#links","title":"Links","text":"<ul> <li>Site: https://ov.wgbh-mla.org/</li> <li>Admin: https://admin.ov.wgbh-mla.org/</li> <li>Documentation: wgbh-mla.github.io/ov-deploy</li> <li>Github: github.com/WGBH-MLA/ov-deploy</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>Developed by the Media Library and Archives at WGBH Boston</p>"},{"location":"deploy/","title":"Deployments","text":"<p>Using Argo-CD, create the following deployments:</p> <p>Setup</p> <p>If you haven't set up a production environment, follow the steps in Setup first.</p>"},{"location":"deploy/#backend","title":"Backend","text":"<p>Deploy the backend to the cluster</p> Backend deployment<pre><code>Namespce: ov\nRepo_Url: https://github.com/WGBH-MLA/ov-deploy\nPath: ov-wag\nBranch: main\n</code></pre>"},{"location":"deploy/#initial-migration","title":"Initial Migration","text":"<p>With a new database and user configured, SSH into the <code>ov-wag</code> pod and run the initial migration:</p> Apply database migrations<pre><code>ov m migrate\n</code></pre>"},{"location":"deploy/#frontend","title":"Frontend","text":"<p>Deploy the frontend to the cluster</p> Frontend deployment<pre><code>Namespce: ov\nRepo_Url: https://github.com/WGBH-MLA/ov-frontend\nPath: ov-frontend\nBranch: main\n</code></pre>"},{"location":"manage/","title":"Management and Maintenance","text":""},{"location":"manage/#backend","title":"Backend","text":"<p>Some common management tasks are described below.</p>"},{"location":"manage/#update-image","title":"Update image","text":"<p>Deployment images can be changed simply by changing the image tag in the deployment configuration.</p> <p>Images are built from each PR to <code>main</code>, as well as pushes to <code>main</code>. To deploy a specific PR, simply change the image tag to the PR number.</p> Change backend image to PR#123<pre><code>      image: ghcr.io/wgbh-mla/ov-wag:pr-123\n</code></pre> <p>To use the latest production image, change the image tag to <code>main</code>.</p> Change backend image to main<pre><code>      image: ghcr.io/wgbh-mla/ov-wag:main\n</code></pre> <p>Change image using <code>kubectl</code></p> <p>This can also be done directly with <code>kubectl</code>:</p> set backend version to PR#123<pre><code>kubectl set image deployment.apps/ov-wag ov-wag=ghcr.io/wgbh-mla/ov-wag:pr-123\n</code></pre>"},{"location":"manage/#scale-deployment","title":"Scale deployment","text":"<p>To scale a deployment, simply change the <code>replicas</code> value in the deployment configuration.</p> Scale backend to 3 replicas<pre><code>  replicas: 3\n</code></pre>"},{"location":"manage/#update-configuration","title":"Update configuration","text":"<p>To update the configuration of a deployment, simply change the value in the deployment configuration.</p> Change backend configuration<pre><code>        - name: OV_DB_PASSWORD\n          value: NEW POSTGRES PASSWORD HERE\n</code></pre>"},{"location":"manage/#database","title":"Database","text":"<p>Data is stored in a PostGreSQL database, hosted in AWS RDS. This page describes common maintenance tasks for the database.</p> <p>For more details about creating and configuring the database, see setup#db.</p>"},{"location":"manage/#backup","title":"Backup","text":"<p>Backups are created automatically by AWS RDS. To create a manual backup, use the AWS console.</p>"},{"location":"manage/#restore","title":"Restore","text":"<p>Restore the database by creating a new RDS instance from a backup instance in the AWS console. </p> <p>Then, update the <code>OV_DB_HOST</code> environment variable in the backend deployment to point to the new database instance.</p>"},{"location":"manage/#migrate","title":"# Migrate","text":"<p>If the Wagtail models have changed, the database must be migrated to reflect the changes. This can be done by running the following command:</p> <pre><code>ov migrate\n</code></pre>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#prerequisites","title":"Prerequisites","text":"<p>These instructions assume you have the following:</p> <ul> <li>A working Kubernetes cluster</li> <li><code>kubectl</code>, configured to connect to your cluster</li> <li>Argo-CD installed and configured</li> <li>Traefik installed and configured as an ingress controller</li> <li>A running PostgreSQL database</li> </ul>"},{"location":"setup/#namespace","title":"Namespace","text":"<p>Create a new production namespace called <code>ov</code>:</p> <pre><code>kubectl create namespace ov\n</code></pre> <p>Set the current context to the new namespace: <pre><code>kubectl config set-context --current --namespace=ov\n\n# Verify the current context\nkubectl config view --minify | grep namespace:\n</code></pre></p>"},{"location":"setup/#database","title":"Database","text":"<p>Create a new database called <code>ov</code> and a new user called <code>postgres</code> and a secure password.</p> Database configuration<pre><code>POSTGRES_USER=postgres\nPOSTGRES_PASSWORD=\"YOUR POSTGRES PASSWORD HERE\"\nPOSTGRES_DB=ov\n</code></pre> Generating a password <p>This command will generate a new secure password:</p> <pre><code>openssl rand -base64 24\n</code></pre> <p>Increace the final number to increase the length and strength of the password.</p>"},{"location":"setup/#secrets","title":"Secrets","text":"<p>Create the Backend secrets file</p> ov-wag/secret.yaml<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: ov-wag-secret\n  namespace: ov\nstringData:\n  OV_DB_PASSWORD: YOUR POSTGRES PASSWORD HERE\n  OV_SECRET_KEY: RanDOmSeCrEtKeY_fOr_sESsion_cOOkies\n  AWS_ACCESS_KEY_ID : # AWS IAM user access key\n  AWS_SECRET_ACCESS_KEY: # AWS IAM user secret key\n</code></pre> <p>Apply this to the cluster:</p> Apply secrets<pre><code>kubectl apply -f ov-wag/secret.yaml\n</code></pre>"},{"location":"stack/","title":"About the Stack","text":"<p>Open Vault is deployed as a number of separate services, built and deployed in a <code>kubernetes</code> cluster.</p>"},{"location":"stack/#kubernetes","title":"Kubernetes","text":"<p>Production deployments are run in a Kubernetes cluster, using images built by our CI/CD pipeline. </p> <p>Deployment <code>yaml</code>s are stored in this repository in subfolders by service.</p>"},{"location":"stack/#resources","title":"Resources","text":"<p>Each component of the stack is deployed as a set of Kubernetes resources. They consist of:</p>"},{"location":"stack/#node","title":"Node","text":"A <code>node</code> is a physical or virtual machine that the cluster is running on. The cluster is made up of a number of nodes, which are managed by the cluster."},{"location":"stack/#image","title":"Image","text":"An <code>image</code> is a docker container containing all the code needed to run a single service."},{"location":"stack/#pod","title":"Pod","text":"A <code>pod</code> is the smallest unit of deployment in Kubernetes. It is a single running container (Docker image), which is managed by a deployment. They are designed to be ephemeral, and easily scaled up or down."},{"location":"stack/#deployment","title":"Deployment","text":"A <code>deployment</code> is a set of pods (the running containers). The deployment manages the pods, and ensures that the desired number of pods are running at all times."},{"location":"stack/#service","title":"Service","text":"A <code>service</code> is a network endpoint that can be accessed by other pods. It is used to expose a deployment as a named endpoint, which can be accessed by other pods in the cluster, e.g: <code>http://ov-wag/</code>."},{"location":"stack/#ingress","title":"Ingress","text":"An <code>ingress</code> is a network endpoint that can be accessed by external clients. It is used to expose a service as a named endpoint, which can be accessed by clients outside the cluster. <p>Traefik</p> <p>We use Traefik as our ingress controller, which is configured to route incoming requests to the appropriate service. It also handles SSL termination, redirects HTTP requests to HTTPS, and allows for custom routing rules.</p>"},{"location":"stack/#configmap","title":"ConfigMap","text":"A <code>configmap</code> is a set of key-value pairs that can be accessed by pods. It is used to store configuration values that are needed by the pods."},{"location":"stack/#secret","title":"Secret","text":"A <code>secret</code> is a secure set of key-value pairs that can be accessed by pods. It is used to store sensitive configuration values that are needed by the pods."},{"location":"stack/#namespace","title":"Namespace","text":"A <code>namespace</code> is a group of resources that are deployed together. Namespaces are used to separate different deployments, like production and demo. <p>Namespacess</p> <p>Currently, we deploy two namespaces:</p> <ul> <li><code>ov</code> Production</li> <li><code>ov-demo</code> Demo</li> </ul>"},{"location":"stack/#terms","title":"Terms","text":"<p>The following are some definitions for some of the terms used in this guide:</p>"},{"location":"stack/#production","title":"Production","text":"The fully deployed stack, publicly available to all clients Deployment is orchestrated through <code>kubernetes</code>."},{"location":"stack/#demo-staging","title":"Demo / Staging","text":"A separate production stack, used to test changes and maintain a live working backup. This will be available on a different domain than the production stack, running in a separate namespcae."},{"location":"stack/#ci","title":"CI","text":"Continuous Integration. The process of automatically building and testing code changes.  <p>GitHub Actions</p> <p>This is done with GitHub Actions workflows defined in the <code>.github/workflows</code> folder of the <code>ov-wag</code> and <code>ov-frontend</code> repositories.</p> <p>Builds are performed automatically on every push to the <code>main</code> branch, and on every pull request, tagged with <code>pr-&lt;number&gt;</code>.</p> <p>Builds are performed regardless of tests passing or failing.</p>"},{"location":"stack/#cd","title":"CD","text":"Continuous Deployment. The process of automatically deploying code changes to the production environment. <p>Argo-CD</p> <p>Deployments are managed by Argo-CD, which is configured to watch for changes in the  <code>main</code> branch. When a change is detected, Argo-CD will pull the latest configuration from the repository, compare it against the running system, and if necessary, apply changes to the cluster.</p>"},{"location":"stack/#frontend","title":"Frontend","text":"Remix server delivering the HTML + Javascript code to the user.  <p>Source: github.com/WGBH-MLA/ov-frontend/</p> <p>Docker: ghcr.io/wgbh-mla/ov-frontend</p>"},{"location":"stack/#backend","title":"Backend","text":"Wagtail (Django) Headless CMS for admin content creation and management, and API to serve the frontend with content. <p>Source: github.com/WGBH-MLA/ov-wag</p> <p>Docker: ghcr.io/wgbh-mla/ov-wag</p>"},{"location":"stack/#db","title":"DB","text":"Database. Using PostgreSQL Database image<pre><code>  image: postgres:16-alpine\n</code></pre>"},{"location":"stack/#proxy","title":"Proxy","text":"Traefik Reverse Proxy. Handles routing of incoming requests to the appropriate service. Also handles SSL termination, redirects HTTP requests to HTTPS, and allows for custom routing rules."},{"location":"stack/#call-sequence","title":"Call sequence","text":"<p>The following diagram describes the call sequence for incoming requests:</p> <pre><code>sequenceDiagram\nClient -&gt;&gt; Proxy: requests page\nProxy --&gt;&gt; Frontend: Traefik proxies request\nFrontend -&gt;&gt; Backend: Frontend  fetches latest data from API\nBackend -&gt;&gt; DB: Backend polls the database\nDB -&gt;&gt; Backend: return database results\nBackend -&gt;&gt; Frontend: return API results\nFrontend -&gt;&gt; Proxy: return built page with latest results\nProxy --&gt;&gt; Client: return response</code></pre>"}]}