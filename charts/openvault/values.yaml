# American Archive configuration
aapb:
  # URL for the American Archive instance
  url: https://demo.aapb.wgbh-mla.org

# Auth0 configuration
auth:
  # Auth0 clientId
  clientId: null
  # Auth0 clientSecret
  clientSecret: null
  # Auth0 URL
  url: null

# AWS configuration
aws:
  # AWS access key ID
  accessKeyId: null
  # AWS secret access key
  secretAccessKey: null

# Database configuration
db:
  # Database host
  host: postgres-postgresql.postgres
  # Database name override. default {{ .Release.Name }}
  name: null
  # Database password
  password: null
  # Database port
  port: '5432'
  # Database user
  user: postgres

# ElasticSearch configuration
elasticsearch:
  # API key for the frontend
  apiKey: null
  # index name
  index: wagtail__wagtailcore_page
  # username for the backend
  username: null
  # password for the backend
  password: null
  # URL for the Elasticsearch instance
  url: https://elastic.dev.wgbh-mla.org

# global configuration
# These values are available in all parent chart dependencies.
# They can also be templated in (most of) the app-template values below.
global:
  # Domain name to generate URLs for the application. This is only used if a URL is not provided.
  domain: dev.wgbh-mla.org
  # URL override, otherwise it will be generated from the release name and domain
  url: null
  # cert-manager cluster issuer to use for TLS certificates
  # certIssuer: letsencrypt-production
  certIssuer: null
  # backend configuration
  backend:
    # Name of the backend service
    name: wagtail
    # debug mode for the backend
    debug: 'false'
    # host for the backend
    host: '0.0.0.0:8000'
    # image for the backend
    image:
      # repository for the backend image
      repository: ghcr.io/wgbh-mla/ov-wag
      # tag for the backend image
      tag: v1.0.0
    # settings module for the backend
    settingsModule: ov_wag.settings.production
    # number of workers for the backend
    workers: '1'
  # frontend configuration
  frontend:
    # Name of the frontend service
    name: remix
    # node environment for the frontend
    nodeEnv: production
    # image for the frontend
    image:
      # repository for the frontend image
      repository: ghcr.io/wgbh-mla/ov-frontend
      # tag for the frontend image
      tag: v1.0.0

# Google configuration
google:
  # Google client ID
  clientId: null

# Override the name generator for object in the release. default {{ .Release.Name }}
nameOverride: null

# Organ configuration
organ:
  # URL for the Organ service
  url: http://organ.organ

# S3 configuration
s3:
  # S3 bucket for media
  name: dev.media.openvault.wgbh.org

app-template:
  controllers:
    backend:
      nameOverride: '{{ .Values.global.backend.name }}'
      containers:
        backend:
          image:
            # #FIXME: this should be a templatable value like the image tag, but it isn't working
            # repository: '{{ .Values.global.backend.image.repository }}'
            repository: ghcr.io/wgbh-mla/ov-wag
            tag: '{{ .Values.global.backend.image.tag }}'
          envFrom:
            - configMap: '{{ template "openvault.backend.fullname" . }}-config'
            - secretRef:
                name: '{{ template "openvault.backend.fullname" . }}-secret'
          probes:
            liveness:
              enabled: true
              custom: true
              type: HTTP
              spec:
                periodSeconds: 30
                httpGet:
                  path: /api/v2/health/
                  port: 8000
            startup:
              enabled: true
              custom: true
              spec:
                initialDelaySeconds: 5
                periodSeconds: 3
                failureThreshold: 20
                httpGet:
                  path: /api/v2/health/
                  port: 8000
      defaultContainerOptions:
        image:
          pullPolicy: Always
        resources:
          limits:
            cpu: '1'
            memory: 1Gi
          requests:
            cpu: 50m
            memory: 50Mi
    frontend:
      nameOverride: '{{ .Values.global.frontend.name }}'
      containers:
        frontend:
          image:
            # #FIXME see above templating error
            # repository: '{{ .Values.global.frontend.image.repository }}'
            repository: ghcr.io/wgbh-mla/ov-frontend
            tag: '{{ .Values.global.frontend.image.tag }}'
          envFrom:
            - configMap: '{{ template "openvault.frontend.fullname" . }}-config'
            - secretRef:
                name: '{{ template "openvault.frontend.fullname" . }}-secret'
          probes:
            liveness:
              enabled: true
              custom: true
              spec:
                periodSeconds: 30
                httpGet:
                  path: /health
                  port: 3000
            startup:
              enabled: true
              custom: true
              spec:
                initialDelaySeconds: 3
                periodSeconds: 3
                failureThreshold: 10
                httpGet:
                  path: /health
                  port: 3000
      defaultContainerOptions:
        image:
          pullPolicy: Always
        resources:
          limits:
            cpu: '1'
            memory: 1Gi
          requests:
            cpu: 50m
            memory: 50Mi
    update-index:
      type: cronjob
      cronjob:
        schedule: 0 8 * * *
      containers:
        update-index:
          image:
            # #FIXME see above templating error
            # repository: '{{ .Values.global.backend.image.repository }}'
            repository: ghcr.io/wgbh-mla/ov-wag
            tag: '{{ .Values.global.backend.image.tag }}'
          envFrom:
            - configMap: '{{ template "openvault.backend.fullname" . }}-config'
            - secretRef:
                name: '{{ template "openvault.backend.fullname" . }}-secret'
          command:
            - python
            - manage.py
            - update_index
    restart-backend:
      type: cronjob
      cronjob:
        schedule: 0 8 * * *
      serviceAccount:
        identifier: backend-restart
      containers:
        restart-backend:
          image:
            repository: bitnami/kubectl
            tag: latest
          command:
            - kubectl
            - rollout
            - restart
            - deployment
            - --selector=app.kubernetes.io/component=backend
  service:
    backend:
      nameOverride: '{{ .Values.global.backend.name }}'
      controller: backend
      ports:
        http:
          port: 80
          targetPort: 8000
    frontend:
      nameOverride: '{{ .Values.global.frontend.name }}'
      controller: frontend
      ports:
        http:
          port: 80
          targetPort: 3000
  ingress:
    frontend:
      nameOverride: '{{ .Values.global.frontend.name }}'
      annotations:
        cert-manager.io/cluster-issuer: '{{ .Values.global.certIssuer }}'
      hosts:
        - host: '{{ template "openvault.url" . }}'
          paths:
            - path: /
              service:
                identifier: frontend
            - path: /accounts
              service:
                identifier: backend
            - path: /authorize
              service:
                identifier: backend
            - path: /admin
              service:
                identifier: backend
            - path: /login
              service:
                identifier: backend
            - path: /logout
              service:
                identifier: backend
      tls:
        - secretName: '{{ template "openvault.frontend.fullname" . }}-tls'
          hosts:
            - '{{ template "openvault.url" . }}'

  serviceAccount:
    extraServiceAccounts:
      backend-restart:
        create: true
        # name: '{{ template "openvault.backend.fullname" . }}-restart'

  rbac:
    roles:
      backend-restart:
        create: true
        type: Role
        rules:
          - apiGroups:
              - apps
            resources:
              - deployments
            verbs:
              - list
              - patch
    bindings:
      backend-restart:
        type: RoleBinding
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          identifier: backend-restart
        subjects:
          - identifier: backend-restart
