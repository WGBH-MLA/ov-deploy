global:
  # Domain name to generate URLs for the application. This is only used if URLs are not provided.
  domain: dev.wgbh-mla.org
  backend:
    name: wagtail
    # URL override for the backend service, otherwise it will be generated from the release name
    url: null
  frontend:
    name: remix
    # URL override for the frontend service, otherwise it will be generated from the release name
    url: null
    elasticApiKey: null
    elasticIndex: wagtail__wagtailcore_page
  aapb:
    url: https://demo.aapb.wgbh-mla.org
  elasticsearch:
    url: https://elastic.dev.wgbh-mla.org
  organ:
    url: http://organ.organ
  # S3 bucket for media
  s3:
    name: dev.media.openvault.wgbh.org

app-template:
  persistence:
    backend-config:
      type: configMap
      name: '{{ template "openvault.backend.fullname" . }}-config'

    frontend-config:
      type: configMap
      name: '{{ template "openvault.frontend.fullname" . }}-config'

  controllers:
    backend:
      nameOverride: '{{ .Values.global.backend.name }}'
      containers:
        backend:
          image:
            repository: ghcr.io/wgbh-mla/ov-wag
            tag: v1.0.0
          envFrom:
            - configMap: '{{ template "openvault.backend.fullname" . }}-config'
            - secretRef:
                name: '{{ template "openvault.backend.fullname" . }}-secret'
      defaultContainerOptions:
        image:
          pullPolicy: Always
        resources:
          limits:
            cpu: '1'
            memory: 1Gi
          requests:
            cpu: 50m
            memory: 50Mi
    frontend:
      nameOverride: '{{ .Values.global.frontend.name }}'
      containers:
        frontend:
          image:
            repository: ghcr.io/wgbh-mla/ov-frontend
            tag: main
          envFrom:
            - configMap: '{{ template "openvault.frontend.fullname" . }}-config'
            - secretRef:
                name: '{{ template "openvault.frontend.fullname" . }}-secret'
      defaultContainerOptions:
        image:
          pullPolicy: Always
        resources:
          limits:
            cpu: '1'
            memory: 1Gi
          requests:
            cpu: 50m
            memory: 50Mi
  service:
    backend:
      nameOverride: '{{ .Values.global.backend.name }}'
      controller: backend
      ports:
        http:
          port: 80
          targetPort: 8000
    frontend:
      nameOverride: '{{ .Values.global.frontend.name }}'
      controller: frontend
      ports:
        http:
          port: 80
          targetPort: 3000
  ingress:
    frontend:
      nameOverride: '{{ .Values.global.frontend.name }}'
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-staging
      hosts:
        - host: '{{ template "openvault.frontend.url" . }}'
          paths:
            - path: /
              service:
                identifier: frontend
            - path: /accounts
              service:
                identifier: backend
            - path: /admin
              service:
                identifier: backend
            - path: /login
              service:
                identifier: backend
            - path: /logout
              service:
                identifier: backend
      tls:
        - secretName: '{{ template "openvault.frontend.fullname" . }}-tls'
          hosts:
            - '{{ template "openvault.frontend.url" . }}'
