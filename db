#!/usr/bin/env python3
###
# Command line tool for managing Open Vault database
###
import click
from utils import run, get_pod_name
from datetime import datetime


@click.group()
@click.option(
    '--context',
    '-c',
    required=True,
    help='the kubectl context to use',
    type=click.Choice(['openvault', 'openvault-demo']),
)
def cli(context: str):
    """Database CLI

    Management of Open Vault production databases
    """
    run(f'kubectl config use-context { context }')
    click.echo(f'context set to { context }')


@cli.command()
@click.pass_context
def backup(ctx):
    """Backup the database to a local file"""
    namespace = ctx.parent.params.get('context')
    pod = get_pod_name(namespace, 'db').replace('pod/', '', 1)
    now = datetime.now().isoformat().replace(':', '.')
    filename = f'db_{ now }.sql'
    click.echo(f'backing up database to { filename }')
    run(
        f'kubectl exec -it { pod } -- bash -c "pg_dump -Fc -U postgres postgres > { filename }"'
    )
    run(f'kubectl cp {pod}:{ filename } { filename }')


@cli.command()
@click.argument(
    'filename',
    required=True,
    type=click.File('r'),
)
@click.pass_context
def restore(ctx, filename: str):
    """Restore the database from a local SQL backup file"""
    namespace = ctx.parent.params.get('context')
    click.echo(f'restoring database to { filename.name }')
    pod = get_pod_name(namespace, 'db')
    run(
        f'cat { filename.name } | kubectl exec -it { pod } -- bash -c "pg_restore --verbose --clean --no-acl --no-owner -U postgres -d postgres"'
    )


if __name__ == '__main__':
    cli()
