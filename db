#!/usr/bin/env python3
###
# Command line tool for managing Open Vault database
###
import click
from deployer import run


@click.group()
@click.option(
    '--context',
    '-c',
    required=True,
    help='the kubectl context to use',
    type=click.Choice(['openvault', 'openvault-demo']),
)
def cli(context: str):
    """Database CLI

    Management of Open Vault production databases
    """
    run(f'kubectl config use-context { context }')
    click.echo(f'context set to { context }')


@cli.command()
@click.argument('workload', required=True)
def get_pod_name(workload: str):
    """Return the name of the first pod running in the workload"""
    return (
        run(
            f'kubectl get pods -l workload.user.cattle.io/workloadselector="deployment-openvault-{ workload }" -o name'
        )
        .strip()
        .split('\n')[0]
    )


@cli.command()
def backup():
    """Backup the database to a local file"""
    click.echo('backing up!')
    pod = get_pod_name('db')
    run(
        f'kubectl exec -it { pod } -- /usr/local/bin/pg_dump -Fc -U postgres postgres > db_$(date +%Y-%m-%d_%H-%M-%S).sql'
    )


@cli.command()
@click.argument(
    'filename',
    required=True,
    type=click.File('rb'),
)
def restore(filename: str):
    """Restore the database from a local SQL backup file"""
    click.echo(f'restoring database to { filename }')
    pod = get_pod_name('db')
    run(
        f'kubectl exec -it { pod } -- /usr/local/bin/pg_restore --verbose --clean --no-acl --no-owner -U postgres -d postgres < { filename }'
    )


if __name__ == '__main__':
    cli()
